{
  "author": {
    "name": "Steve Kaliski",
    "email": "sjkaliski@gmail.com",
    "url": "https://github.com/sjkaliski"
  },
  "name": "numbers",
  "description": "Advanced Mathematics Library for JavaScript",
  "version": "0.0.2",
  "homepage": "https://github.com/sjkaliski/numbers.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/sjkaliski/numbers.js"
  },
  "contributors": [
    {
      "name": "David Byrd",
      "url": "https://github.com/davidbyrd11"
    },
    {
      "name": "Ethan Resnick",
      "url": "https://github.comc/ethanresnick"
    }
  ],
  "engines": {
    "node": ">= v0.6.0"
  },
  "main": "index",
  "keywords": [
    "math",
    "mathematics",
    "numbers",
    "statistics"
  ],
  "dependencies": {
    "mocha": "~1.5.0"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "Numbers - an advanced mathematics toolkit for JavaScript and Node.js\ndeveloped by Steve Kaliski, [@sjkaliski](http://twitter.com/sjkaliski)\n\n\n## Description\n\nNumbers provides a comprehensive set of mathematical tools that currently are not offered in JavaScript.  These tools include:\n\n* Basic calculations\n* Calculus\n* Matrix Operations\n* Prime Numbers\n* Statistics\n* More...\n\nA few things to note before using: JavaScript, like many languages, does not necessarily manage floating points as well as we'd all like it to. For example, if adding decimals, the addition tool won't return the exact value. This is an unfortunate error. Precautions have been made to account for this. After including numbers, you can set an error bound. Anything in this will be considered an \"acceptable outcome.\"\n\nThe primary uses cases are client side operations which the DOM will recognize (e.g. 1.1px == 1px). It can be used for data analysis, calculations, etc. on the server as well.\n\n## How to use\n\nNumbers is pretty straightforward to use.\n\nWith node, simply require it:\n```javascript\nvar numbers = require('numbers');\n```\n\nFor example, if we wanted to estimate the integral of sin(x) from -2 to 4, we could:\n\nUse riemann integrals (with 200 subdivisions)\n\n```javascript\nvar numbers = require('numbers');\nvar func = function(x) {\n  return Math.sin(x);\n}\n\nnumbers.calculus.riemann(func, -2, 4, 200);\n```\n\nOr adaptive simpson quadrature (with epsilon .0001)\n\n```javascript\nnumbers.calculus.adaptiveSimpson(func, -2, 4, .0001);\n```\n\nSay we wanted to run some matrix calculations:\n\nWe can add two matrices\n\n```javascript\nvar array1 = [0, 1, 2];\nvar array2 = [3, 4, 5];\n\nnumbers.matrix.addition(array1, array2);\n```\n\nWe can transpose a matrix\n\n```javascript\nnumbers.matrix.transpose(array);\n```\n\nNumeric.ly also includes some basic prime number analysis.  We can check if a number is prime:\n\n```javascript\n//basic check\nnumbers.prime.simple(number);\n\n//elliptic analysis (good for huge numbers)\nnumbers.prime.elliptic(number);\n```\n\nThe statistics tools include mean, median, mode, standard deviation, random sample generator, correlation, confidence intervals, t-test, chi-square, and more.\n\n```javascript\nnumbers.statistic.mean(array);\nnumbers.statistic.median(array);\nnumbers.statistic.mode(array);\nnumbers.statistic.standardDev(array);\nnumbers.statistic.randomSample(lower, upper, n);\nnumbers.statistic.correlation(array1, array2);\n```\nFor further documentation, check out our [JSDoc](http://jsdoc.info/sjkaliski/numbers.js/)\n\n## Test\n\nTo execute, run:\n\n```\nnpm test\n```\n\n## Contributors\n* Steve Kaliski - [@sjkaliski](http://twitter.com/sjkaliski)\n* David Byrd - [@davidbyrd11](http://twitter.com/davidbyrd11)\n* Ethan Resnick - [@studip101](http://twitter.com/studip101)",
  "_id": "numbers@0.0.2",
  "_from": "numbers"
}
